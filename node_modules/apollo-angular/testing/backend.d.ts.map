{"version":3,"file":"backend.d.ts","sources":["backend.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { FetchResult, Observable as LinkObservable } from 'apollo-link';\nimport { ApolloTestingController, MatchOperation } from './controller';\nimport { TestOperation, Operation } from './operation';\n/**\n * A testing backend for `Apollo`.\n *\n * `ApolloTestingBackend` works by keeping a list of all open operations.\n * As operations come in, they're added to the list. Users can assert that specific\n * operations were made and then flush them. In the end, a verify() method asserts\n * that no unexpected operations were made.\n */\nexport declare class ApolloTestingBackend implements ApolloTestingController {\n    /**\n     * List of pending operations which have not yet been expected.\n     */\n    private open;\n    /**\n     * Handle an incoming operation by queueing it in the list of open operations.\n     */\n    handle(op: Operation): LinkObservable<FetchResult>;\n    /**\n     * Helper function to search for operations in the list of open operations.\n     */\n    private _match;\n    private matchOp;\n    private compare;\n    /**\n     * Search for operations in the list of open operations, and return all that match\n     * without asserting anything about the number of matches.\n     */\n    match(match: MatchOperation): TestOperation[];\n    /**\n     * Expect that a single outstanding request matches the given matcher, and return\n     * it.\n     *\n     * operations returned through this API will no longer be in the list of open operations,\n     * and thus will not match twice.\n     */\n    expectOne(match: MatchOperation, description?: string): TestOperation;\n    /**\n     * Expect that no outstanding operations match the given matcher, and throw an error\n     * if any do.\n     */\n    expectNone(match: MatchOperation, description?: string): void;\n    /**\n     * Validate that there are no outstanding operations.\n     */\n    verify(): void;\n    private isDocumentNode;\n    private descriptionFromMatcher;\n}\n"]}