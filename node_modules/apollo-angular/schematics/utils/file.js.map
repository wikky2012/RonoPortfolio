{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../schematics/utils/file.ts"],"names":[],"mappings":";;;AAAA,iCAAiC;AACjC,2DAAqE;AAErE,SAAgB,SAAS,CAAU,OAAe;IAChD,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,8BAA8B,EAAE,EAAE,CAAC,CAAC,CAAA;AACxE,CAAC;AAFD,8BAEC;AAED;;;;GAIG;AACH,SAAgB,WAAW,CAAC,IAAU,EAAE,IAAY;IAClD,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,IAAI,MAAM,KAAK,IAAI,EAAE;QACnB,MAAM,IAAI,gCAAmB,CAAC,iBAAiB,IAAI,GAAG,CAAC,CAAC;KACzD;IAED,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACzC,IAAI;QACF,qBAAqB;QACrB,OAAO,SAAS,CAAC,OAAO,CAAC,CAAC;KAC3B;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,gCAAmB,CAAC,kBAAkB,IAAI,GAAG,CAAC,CAAC;KAC1D;AACH,CAAC;AAbD,kCAaC;AAED;;;;KAIK;AACL,SAAgB,uBAAuB,CACrC,IAAU,EACV,IAAY;IAEZ,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,IAAI,gCAAmB,CAAC,kBAAkB,IAAI,GAAG,CAAC,CAAC;KAC1D;IAED,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;IAClC,MAAM,UAAU,GAAG,EAAE,CAAC,gBAAgB,CACpC,IAAI,EACJ,OAAO,EACP,EAAE,CAAC,YAAY,CAAC,MAAM,EACtB,IAAI,CACL,CAAC;IAEF,OAAO,UAAU,CAAC;AACpB,CAAC;AAlBD,0DAkBC","sourcesContent":["import * as ts from 'typescript';\nimport {Tree, SchematicsException} from '@angular-devkit/schematics';\n\nexport function parseJSON<T = any>(content: string): T {\n  return JSON.parse(content.replace(/(\\/\\*[^*]*\\*\\/)|(\\/\\/[^*]*)/g, ''))\n}\n\n/**\n * Returns the parsed content of a json file.\n * @param host {Tree} The source tree.\n * @param path {String} The path to the file to read. Relative to the root of the tree.\n */\nexport function getJsonFile(host: Tree, path: string) {\n  const buffer = host.read(path);\n  if (buffer === null) {\n    throw new SchematicsException(`Couldn't read ${path}!`);\n  }\n\n  const content = buffer.toString('utf-8');\n  try {\n    // remove comments :)\n    return parseJSON(content);\n  } catch (e) {\n    throw new SchematicsException(`Couldn't parse ${path}!`);\n  }\n}\n\n/**\n * Reads file from given path and Returns TypeScript source file.\n * @param host {Tree} The source tree.\n * @param path {String} The path to the file to read. Relative to the root of the tree.\n * */\nexport function getTypeScriptSourceFile(\n  host: Tree,\n  path: string,\n): ts.SourceFile {\n  const buffer = host.read(path);\n  if (!buffer) {\n    throw new SchematicsException(`Could not find ${path}!`);\n  }\n\n  const content = buffer.toString();\n  const sourceFile = ts.createSourceFile(\n    path,\n    content,\n    ts.ScriptTarget.Latest,\n    true,\n  );\n\n  return sourceFile;\n}\n"]}