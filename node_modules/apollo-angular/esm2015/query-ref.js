import { from } from 'rxjs';
import { wrapWithZone, fixObservable } from './utils';
import { startWith } from 'rxjs/operators';
export class QueryRef {
    constructor(obsQuery, ngZone, options) {
        this.obsQuery = obsQuery;
        const wrapped = wrapWithZone(from(fixObservable(this.obsQuery)), ngZone);
        this.valueChanges = options.useInitialLoading
            ? wrapped.pipe(startWith(Object.assign(Object.assign({}, this.obsQuery.getCurrentResult()), { error: undefined, partial: undefined, stale: true })))
            : wrapped;
        this.queryId = this.obsQuery.queryId;
    }
    // ObservableQuery's methods
    result() {
        return this.obsQuery.result();
    }
    currentResult() {
        return this.obsQuery.currentResult();
    }
    getLastResult() {
        return this.obsQuery.getLastResult();
    }
    getLastError() {
        return this.obsQuery.getLastError();
    }
    resetLastResults() {
        return this.obsQuery.resetLastResults();
    }
    refetch(variables) {
        return this.obsQuery.refetch(variables);
    }
    fetchMore(fetchMoreOptions) {
        return this.obsQuery.fetchMore(fetchMoreOptions);
    }
    subscribeToMore(options) {
        // XXX: there's a bug in apollo-client typings
        // it should not inherit types from ObservableQuery
        return this.obsQuery.subscribeToMore(options);
    }
    updateQuery(mapFn) {
        return this.obsQuery.updateQuery(mapFn);
    }
    stopPolling() {
        return this.obsQuery.stopPolling();
    }
    startPolling(pollInterval) {
        return this.obsQuery.startPolling(pollInterval);
    }
    setOptions(opts) {
        return this.obsQuery.setOptions(opts);
    }
    setVariables(variables, tryFetch = false, fetchResults = true) {
        return this.obsQuery.setVariables(variables, tryFetch, fetchResults);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktcmVmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3F1ZXJ5LXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFXQSxPQUFPLEVBQWEsSUFBSSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRXRDLE9BQU8sRUFBQyxZQUFZLEVBQUUsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRXBELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6QyxNQUFNLE9BQU8sUUFBUTtJQU1uQixZQUNVLFFBQStCLEVBQ3ZDLE1BQWMsRUFDZCxPQUE2QjtRQUZyQixhQUFRLEdBQVIsUUFBUSxDQUF1QjtRQUl2QyxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUV6RSxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUI7WUFDM0MsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQ1YsU0FBUyxpQ0FDSixJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEtBQ25DLEtBQUssRUFBRSxTQUFTLEVBQ2hCLE9BQU8sRUFBRSxTQUFTLEVBQ2xCLEtBQUssRUFBRSxJQUFJLElBQ1gsQ0FDSDtZQUNILENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDWixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCw0QkFBNEI7SUFFckIsTUFBTTtRQUNYLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRU0sYUFBYTtRQUNsQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVNLGFBQWE7UUFDbEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFTSxZQUFZO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRU0sZ0JBQWdCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFTSxPQUFPLENBQUMsU0FBYTtRQUMxQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFTSxTQUFTLENBQ2QsZ0JBQXNFO1FBRXRFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRU0sZUFBZSxDQUNwQixPQUEwQztRQUUxQyw4Q0FBOEM7UUFDOUMsbURBQW1EO1FBQ25ELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsT0FBYyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUNNLFdBQVcsQ0FDaEIsS0FBb0U7UUFFcEUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRU0sV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVNLFlBQVksQ0FBQyxZQUFvQjtRQUN0QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTSxVQUFVLENBQUMsSUFBUztRQUN6QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFTSxZQUFZLENBQ2pCLFNBQVksRUFDWixXQUFvQixLQUFLLEVBQ3pCLFlBQVksR0FBRyxJQUFJO1FBRW5CLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUN2RSxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05nWm9uZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBBcG9sbG9RdWVyeVJlc3VsdCxcbiAgT2JzZXJ2YWJsZVF1ZXJ5LFxuICBBcG9sbG9FcnJvcixcbiAgRmV0Y2hNb3JlUXVlcnlPcHRpb25zLFxuICBGZXRjaE1vcmVPcHRpb25zLFxuICBTdWJzY3JpYmVUb01vcmVPcHRpb25zLFxuICBVcGRhdGVRdWVyeU9wdGlvbnMsXG4gIEFwb2xsb0N1cnJlbnRSZXN1bHQsXG59IGZyb20gJ2Fwb2xsby1jbGllbnQnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBmcm9tfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHt3cmFwV2l0aFpvbmUsIGZpeE9ic2VydmFibGV9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHtXYXRjaFF1ZXJ5T3B0aW9ucywgUn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge3N0YXJ0V2l0aH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgY2xhc3MgUXVlcnlSZWY8VCwgViA9IFI+IHtcbiAgcHVibGljIHZhbHVlQ2hhbmdlczogT2JzZXJ2YWJsZTxBcG9sbG9RdWVyeVJlc3VsdDxUPj47XG4gIHB1YmxpYyBvcHRpb25zOiBPYnNlcnZhYmxlUXVlcnk8VCwgVj5bJ29wdGlvbnMnXTtcbiAgcHVibGljIHF1ZXJ5SWQ6IE9ic2VydmFibGVRdWVyeTxULCBWPlsncXVlcnlJZCddO1xuICBwdWJsaWMgdmFyaWFibGVzOiBWO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgb2JzUXVlcnk6IE9ic2VydmFibGVRdWVyeTxULCBWPixcbiAgICBuZ1pvbmU6IE5nWm9uZSxcbiAgICBvcHRpb25zOiBXYXRjaFF1ZXJ5T3B0aW9uczxWPixcbiAgKSB7XG4gICAgY29uc3Qgd3JhcHBlZCA9IHdyYXBXaXRoWm9uZShmcm9tKGZpeE9ic2VydmFibGUodGhpcy5vYnNRdWVyeSkpLCBuZ1pvbmUpO1xuXG4gICAgdGhpcy52YWx1ZUNoYW5nZXMgPSBvcHRpb25zLnVzZUluaXRpYWxMb2FkaW5nXG4gICAgICA/IHdyYXBwZWQucGlwZShcbiAgICAgICAgICBzdGFydFdpdGgoe1xuICAgICAgICAgICAgLi4udGhpcy5vYnNRdWVyeS5nZXRDdXJyZW50UmVzdWx0KCksXG4gICAgICAgICAgICBlcnJvcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcGFydGlhbDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc3RhbGU6IHRydWUsXG4gICAgICAgICAgfSksXG4gICAgICAgIClcbiAgICAgIDogd3JhcHBlZDtcbiAgICB0aGlzLnF1ZXJ5SWQgPSB0aGlzLm9ic1F1ZXJ5LnF1ZXJ5SWQ7XG4gIH1cblxuICAvLyBPYnNlcnZhYmxlUXVlcnkncyBtZXRob2RzXG5cbiAgcHVibGljIHJlc3VsdCgpOiBQcm9taXNlPEFwb2xsb1F1ZXJ5UmVzdWx0PFQ+PiB7XG4gICAgcmV0dXJuIHRoaXMub2JzUXVlcnkucmVzdWx0KCk7XG4gIH1cblxuICBwdWJsaWMgY3VycmVudFJlc3VsdCgpOiBBcG9sbG9DdXJyZW50UmVzdWx0PFQ+IHtcbiAgICByZXR1cm4gdGhpcy5vYnNRdWVyeS5jdXJyZW50UmVzdWx0KCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TGFzdFJlc3VsdCgpOiBBcG9sbG9RdWVyeVJlc3VsdDxUPiB7XG4gICAgcmV0dXJuIHRoaXMub2JzUXVlcnkuZ2V0TGFzdFJlc3VsdCgpO1xuICB9XG5cbiAgcHVibGljIGdldExhc3RFcnJvcigpOiBBcG9sbG9FcnJvciB7XG4gICAgcmV0dXJuIHRoaXMub2JzUXVlcnkuZ2V0TGFzdEVycm9yKCk7XG4gIH1cblxuICBwdWJsaWMgcmVzZXRMYXN0UmVzdWx0cygpOiB2b2lkIHtcbiAgICByZXR1cm4gdGhpcy5vYnNRdWVyeS5yZXNldExhc3RSZXN1bHRzKCk7XG4gIH1cblxuICBwdWJsaWMgcmVmZXRjaCh2YXJpYWJsZXM/OiBWKTogUHJvbWlzZTxBcG9sbG9RdWVyeVJlc3VsdDxUPj4ge1xuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LnJlZmV0Y2godmFyaWFibGVzKTtcbiAgfVxuXG4gIHB1YmxpYyBmZXRjaE1vcmU8SyBleHRlbmRzIGtleW9mIFY+KFxuICAgIGZldGNoTW9yZU9wdGlvbnM6IEZldGNoTW9yZVF1ZXJ5T3B0aW9uczxWLCBLPiAmIEZldGNoTW9yZU9wdGlvbnM8VCwgVj4sXG4gICk6IFByb21pc2U8QXBvbGxvUXVlcnlSZXN1bHQ8VD4+IHtcbiAgICByZXR1cm4gdGhpcy5vYnNRdWVyeS5mZXRjaE1vcmUoZmV0Y2hNb3JlT3B0aW9ucyk7XG4gIH1cblxuICBwdWJsaWMgc3Vic2NyaWJlVG9Nb3JlPE1UID0gYW55LCBNViA9IFI+KFxuICAgIG9wdGlvbnM6IFN1YnNjcmliZVRvTW9yZU9wdGlvbnM8VCwgTVYsIE1UPixcbiAgKTogKCkgPT4gdm9pZCB7XG4gICAgLy8gWFhYOiB0aGVyZSdzIGEgYnVnIGluIGFwb2xsby1jbGllbnQgdHlwaW5nc1xuICAgIC8vIGl0IHNob3VsZCBub3QgaW5oZXJpdCB0eXBlcyBmcm9tIE9ic2VydmFibGVRdWVyeVxuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LnN1YnNjcmliZVRvTW9yZShvcHRpb25zIGFzIGFueSk7XG4gIH1cbiAgcHVibGljIHVwZGF0ZVF1ZXJ5KFxuICAgIG1hcEZuOiAocHJldmlvdXNRdWVyeVJlc3VsdDogVCwgb3B0aW9uczogVXBkYXRlUXVlcnlPcHRpb25zPFY+KSA9PiBULFxuICApOiB2b2lkIHtcbiAgICByZXR1cm4gdGhpcy5vYnNRdWVyeS51cGRhdGVRdWVyeShtYXBGbik7XG4gIH1cblxuICBwdWJsaWMgc3RvcFBvbGxpbmcoKTogdm9pZCB7XG4gICAgcmV0dXJuIHRoaXMub2JzUXVlcnkuc3RvcFBvbGxpbmcoKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGFydFBvbGxpbmcocG9sbEludGVydmFsOiBudW1iZXIpOiB2b2lkIHtcbiAgICByZXR1cm4gdGhpcy5vYnNRdWVyeS5zdGFydFBvbGxpbmcocG9sbEludGVydmFsKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRPcHRpb25zKG9wdHM6IGFueSkge1xuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LnNldE9wdGlvbnMob3B0cyk7XG4gIH1cblxuICBwdWJsaWMgc2V0VmFyaWFibGVzKFxuICAgIHZhcmlhYmxlczogVixcbiAgICB0cnlGZXRjaDogYm9vbGVhbiA9IGZhbHNlLFxuICAgIGZldGNoUmVzdWx0cyA9IHRydWUsXG4gICkge1xuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LnNldFZhcmlhYmxlcyh2YXJpYWJsZXMsIHRyeUZldGNoLCBmZXRjaFJlc3VsdHMpO1xuICB9XG59XG4iXX0=