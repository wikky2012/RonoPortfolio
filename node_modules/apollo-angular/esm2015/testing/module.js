import { ApolloModule, Apollo } from 'apollo-angular';
import { ApolloLink } from 'apollo-link';
import { InMemoryCache } from 'apollo-cache-inmemory';
import { ApolloCache } from 'apollo-cache';
import { NgModule, InjectionToken, Inject, Optional } from '@angular/core';
import { ApolloTestingController } from './controller';
import { ApolloTestingBackend } from './backend';
export const APOLLO_TESTING_CACHE = new InjectionToken('apollo-angular/testing cache');
export const APOLLO_TESTING_NAMED_CACHE = new InjectionToken('apollo-angular/testing named cache');
export const APOLLO_TESTING_CLIENTS = new InjectionToken('apollo-angular/testing named clients');
function addClient(name, op) {
    op.clientName = name;
    return op;
}
export class ApolloTestingModuleCore {
    constructor(apollo, backend, namedClients, cache, namedCaches) {
        function createOptions(name, c) {
            return {
                link: new ApolloLink((operation) => backend.handle(addClient(name, operation))),
                cache: c ||
                    new InMemoryCache({
                        addTypename: false,
                    }),
            };
        }
        apollo.create(createOptions('default', cache));
        if (namedClients && namedClients.length) {
            namedClients.forEach((name) => {
                const caches = namedCaches && typeof namedCaches === 'object' ? namedCaches : {};
                apollo.createNamed(name, createOptions(name, caches[name]));
            });
        }
    }
}
ApolloTestingModuleCore.decorators = [
    { type: NgModule, args: [{
                imports: [ApolloModule],
                providers: [
                    ApolloTestingBackend,
                    { provide: ApolloTestingController, useExisting: ApolloTestingBackend },
                ],
            },] }
];
ApolloTestingModuleCore.ctorParameters = () => [
    { type: Apollo },
    { type: ApolloTestingBackend },
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_CLIENTS,] }] },
    { type: ApolloCache, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_CACHE,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_NAMED_CACHE,] }] }
];
export class ApolloTestingModule {
    static withClients(names) {
        return {
            ngModule: ApolloTestingModuleCore,
            providers: [
                {
                    provide: APOLLO_TESTING_CLIENTS,
                    useValue: names,
                },
            ],
        };
    }
}
ApolloTestingModule.decorators = [
    { type: NgModule, args: [{
                imports: [ApolloTestingModuleCore],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdGVzdGluZy9zcmMvbW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxZQUFZLEVBQUUsTUFBTSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEQsT0FBTyxFQUFDLFVBQVUsRUFBNkIsTUFBTSxhQUFhLENBQUM7QUFDbkUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3BELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFDLFFBQVEsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6RSxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDckQsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sV0FBVyxDQUFDO0FBSy9DLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLElBQUksY0FBYyxDQUNwRCw4QkFBOEIsQ0FDL0IsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLElBQUksY0FBYyxDQUMxRCxvQ0FBb0MsQ0FDckMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLElBQUksY0FBYyxDQUN0RCxzQ0FBc0MsQ0FDdkMsQ0FBQztBQUVGLFNBQVMsU0FBUyxDQUFDLElBQVksRUFBRSxFQUFpQjtJQUMvQyxFQUFnQixDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFFcEMsT0FBTyxFQUFlLENBQUM7QUFDekIsQ0FBQztBQVNELE1BQU0sT0FBTyx1QkFBdUI7SUFDbEMsWUFDRSxNQUFjLEVBQ2QsT0FBNkIsRUFHN0IsWUFBdUIsRUFHdkIsS0FBd0IsRUFHeEIsV0FBaUI7UUFFakIsU0FBUyxhQUFhLENBQUMsSUFBWSxFQUFFLENBQTJCO1lBQzlELE9BQU87Z0JBQ0wsSUFBSSxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FDakMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQzNDO2dCQUNELEtBQUssRUFDSCxDQUFDO29CQUNELElBQUksYUFBYSxDQUFDO3dCQUNoQixXQUFXLEVBQUUsS0FBSztxQkFDbkIsQ0FBQzthQUNMLENBQUM7UUFDSixDQUFDO1FBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFL0MsSUFBSSxZQUFZLElBQUksWUFBWSxDQUFDLE1BQU0sRUFBRTtZQUN2QyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQzVCLE1BQU0sTUFBTSxHQUNWLFdBQVcsSUFBSSxPQUFPLFdBQVcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUVwRSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUQsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7OztZQTVDRixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO2dCQUN2QixTQUFTLEVBQUU7b0JBQ1Qsb0JBQW9CO29CQUNwQixFQUFDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUM7aUJBQ3RFO2FBQ0Y7OztZQXBDcUIsTUFBTTtZQU9wQixvQkFBb0I7d0NBa0N2QixRQUFRLFlBQ1IsTUFBTSxTQUFDLHNCQUFzQjtZQXZDMUIsV0FBVyx1QkF5Q2QsUUFBUSxZQUNSLE1BQU0sU0FBQyxvQkFBb0I7NENBRTNCLFFBQVEsWUFDUixNQUFNLFNBQUMsMEJBQTBCOztBQWdDdEMsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixNQUFNLENBQUMsV0FBVyxDQUFDLEtBQWU7UUFDaEMsT0FBTztZQUNMLFFBQVEsRUFBRSx1QkFBdUI7WUFDakMsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxzQkFBc0I7b0JBQy9CLFFBQVEsRUFBRSxLQUFLO2lCQUNoQjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQWRGLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQzthQUNuQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXBvbGxvTW9kdWxlLCBBcG9sbG99IGZyb20gJ2Fwb2xsby1hbmd1bGFyJztcbmltcG9ydCB7QXBvbGxvTGluaywgT3BlcmF0aW9uIGFzIExpbmtPcGVyYXRpb259IGZyb20gJ2Fwb2xsby1saW5rJztcbmltcG9ydCB7SW5NZW1vcnlDYWNoZX0gZnJvbSAnYXBvbGxvLWNhY2hlLWlubWVtb3J5JztcbmltcG9ydCB7QXBvbGxvQ2FjaGV9IGZyb20gJ2Fwb2xsby1jYWNoZSc7XG5pbXBvcnQge05nTW9kdWxlLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0LCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7QXBvbGxvVGVzdGluZ0NvbnRyb2xsZXJ9IGZyb20gJy4vY29udHJvbGxlcic7XG5pbXBvcnQge0Fwb2xsb1Rlc3RpbmdCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmQnO1xuaW1wb3J0IHtPcGVyYXRpb259IGZyb20gJy4vb3BlcmF0aW9uJztcblxuZXhwb3J0IHR5cGUgTmFtZWRDYWNoZXMgPSBSZWNvcmQ8c3RyaW5nLCBBcG9sbG9DYWNoZTxhbnk+IHwgdW5kZWZpbmVkIHwgbnVsbD47XG5cbmV4cG9ydCBjb25zdCBBUE9MTE9fVEVTVElOR19DQUNIRSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxBcG9sbG9DYWNoZTxhbnk+PihcbiAgJ2Fwb2xsby1hbmd1bGFyL3Rlc3RpbmcgY2FjaGUnLFxuKTtcblxuZXhwb3J0IGNvbnN0IEFQT0xMT19URVNUSU5HX05BTUVEX0NBQ0hFID0gbmV3IEluamVjdGlvblRva2VuPE5hbWVkQ2FjaGVzPihcbiAgJ2Fwb2xsby1hbmd1bGFyL3Rlc3RpbmcgbmFtZWQgY2FjaGUnLFxuKTtcblxuZXhwb3J0IGNvbnN0IEFQT0xMT19URVNUSU5HX0NMSUVOVFMgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nW10+KFxuICAnYXBvbGxvLWFuZ3VsYXIvdGVzdGluZyBuYW1lZCBjbGllbnRzJyxcbik7XG5cbmZ1bmN0aW9uIGFkZENsaWVudChuYW1lOiBzdHJpbmcsIG9wOiBMaW5rT3BlcmF0aW9uKTogT3BlcmF0aW9uIHtcbiAgKG9wIGFzIE9wZXJhdGlvbikuY2xpZW50TmFtZSA9IG5hbWU7XG5cbiAgcmV0dXJuIG9wIGFzIE9wZXJhdGlvbjtcbn1cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0Fwb2xsb01vZHVsZV0sXG4gIHByb3ZpZGVyczogW1xuICAgIEFwb2xsb1Rlc3RpbmdCYWNrZW5kLFxuICAgIHtwcm92aWRlOiBBcG9sbG9UZXN0aW5nQ29udHJvbGxlciwgdXNlRXhpc3Rpbmc6IEFwb2xsb1Rlc3RpbmdCYWNrZW5kfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgQXBvbGxvVGVzdGluZ01vZHVsZUNvcmUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBhcG9sbG86IEFwb2xsbyxcbiAgICBiYWNrZW5kOiBBcG9sbG9UZXN0aW5nQmFja2VuZCxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoQVBPTExPX1RFU1RJTkdfQ0xJRU5UUylcbiAgICBuYW1lZENsaWVudHM/OiBzdHJpbmdbXSxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoQVBPTExPX1RFU1RJTkdfQ0FDSEUpXG4gICAgY2FjaGU/OiBBcG9sbG9DYWNoZTxhbnk+LFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChBUE9MTE9fVEVTVElOR19OQU1FRF9DQUNIRSlcbiAgICBuYW1lZENhY2hlcz86IGFueSwgLy8gRklYOiB1c2luZyBOYW1lZENhY2hlcyBoZXJlIG1ha2VzIG5nYyBmYWlsXG4gICkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMobmFtZTogc3RyaW5nLCBjPzogQXBvbGxvQ2FjaGU8YW55PiB8IG51bGwpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbms6IG5ldyBBcG9sbG9MaW5rKChvcGVyYXRpb24pID0+XG4gICAgICAgICAgYmFja2VuZC5oYW5kbGUoYWRkQ2xpZW50KG5hbWUsIG9wZXJhdGlvbikpLFxuICAgICAgICApLFxuICAgICAgICBjYWNoZTpcbiAgICAgICAgICBjIHx8XG4gICAgICAgICAgbmV3IEluTWVtb3J5Q2FjaGUoe1xuICAgICAgICAgICAgYWRkVHlwZW5hbWU6IGZhbHNlLFxuICAgICAgICAgIH0pLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBhcG9sbG8uY3JlYXRlKGNyZWF0ZU9wdGlvbnMoJ2RlZmF1bHQnLCBjYWNoZSkpO1xuXG4gICAgaWYgKG5hbWVkQ2xpZW50cyAmJiBuYW1lZENsaWVudHMubGVuZ3RoKSB7XG4gICAgICBuYW1lZENsaWVudHMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBjYWNoZXMgPVxuICAgICAgICAgIG5hbWVkQ2FjaGVzICYmIHR5cGVvZiBuYW1lZENhY2hlcyA9PT0gJ29iamVjdCcgPyBuYW1lZENhY2hlcyA6IHt9O1xuXG4gICAgICAgIGFwb2xsby5jcmVhdGVOYW1lZChuYW1lLCBjcmVhdGVPcHRpb25zKG5hbWUsIGNhY2hlc1tuYW1lXSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtBcG9sbG9UZXN0aW5nTW9kdWxlQ29yZV0sXG59KVxuZXhwb3J0IGNsYXNzIEFwb2xsb1Rlc3RpbmdNb2R1bGUge1xuICBzdGF0aWMgd2l0aENsaWVudHMobmFtZXM6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBBcG9sbG9UZXN0aW5nTW9kdWxlQ29yZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQVBPTExPX1RFU1RJTkdfQ0xJRU5UUyxcbiAgICAgICAgICB1c2VWYWx1ZTogbmFtZXMsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==