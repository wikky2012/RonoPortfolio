{"version":3,"file":"ngApolloBoost.js","sources":["../../src/tokens.ts","../../src/apollo-boost.ts","../../src/apollo-boost-module.ts","../../src/ngApolloBoost.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core';\n\nimport {PresetConfig} from './types';\n\nexport const APOLLO_BOOST_CONFIG = new InjectionToken<PresetConfig>(\n  '[apollo-angular-boost] config',\n);\n","import {Injectable} from '@angular/core';\nimport {ApolloLink, Observable} from 'apollo-link';\nimport {Apollo} from 'apollo-angular';\nimport {HttpLink} from 'apollo-angular-link-http';\nimport {withClientState} from 'apollo-link-state';\nimport {onError} from 'apollo-link-error';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\n\nimport {PresetConfig} from './types';\n\n@Injectable()\nexport class ApolloBoost {\n  constructor(private apollo: Apollo, private httpLink: HttpLink) {}\n\n  public create(config: PresetConfig) {\n    const cache =\n      config && config.cacheRedirects\n        ? new InMemoryCache({cacheRedirects: config.cacheRedirects})\n        : new InMemoryCache();\n\n    const stateLink =\n      config && config.clientState\n        ? withClientState({...config.clientState, cache})\n        : false;\n\n    const errorLink =\n      config && config.onError\n        ? onError(config.onError)\n        : onError(({graphQLErrors, networkError}) => {\n            if (graphQLErrors) {\n              graphQLErrors.map(({message, locations, path}) =>\n                // tslint:disable-next-line\n                console.log(\n                  `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n                ),\n              );\n            }\n            if (networkError) {\n              // tslint:disable-next-line\n              console.log(`[Network error]: ${networkError}`);\n            }\n          });\n\n    const requestHandler =\n      config && config.request\n        ? new ApolloLink(\n            (operation, forward) =>\n              new Observable((observer) => {\n                let handle: any;\n                Promise.resolve(operation)\n                  .then((oper) => config.request(oper))\n                  .then(() => {\n                    handle = forward(operation).subscribe({\n                      next: observer.next.bind(observer),\n                      error: observer.error.bind(observer),\n                      complete: observer.complete.bind(observer),\n                    });\n                  })\n                  .catch(observer.error.bind(observer));\n\n                return () => {\n                  if (handle) {\n                    handle.unsubscribe();\n                  }\n                };\n              }),\n          )\n        : false;\n\n    const httpLink = this.httpLink.create({\n      ...((config && config.httpOptions) || {}),\n      uri: (config && config.uri) || '/graphql',\n    });\n\n    const link = ApolloLink.from(\n      [errorLink, requestHandler, stateLink, httpLink].filter(\n        (x) => !!x,\n      ) as ApolloLink[],\n    );\n\n    this.apollo.create({\n      link,\n      cache,\n    });\n  }\n}\n","import {NgModule, Optional, Inject} from '@angular/core';\nimport {ApolloModule} from 'apollo-angular';\nimport {HttpLinkModule} from 'apollo-angular-link-http';\n\nimport {ApolloBoost} from './apollo-boost';\nimport {APOLLO_BOOST_CONFIG} from './tokens';\nimport {PresetConfig} from './types';\n\n@NgModule({\n  imports: [ApolloModule, HttpLinkModule],\n  providers: [ApolloBoost],\n})\nexport class ApolloBoostModule {\n  constructor(\n    boost: ApolloBoost,\n    @Optional()\n    @Inject(APOLLO_BOOST_CONFIG)\n    config?: PresetConfig,\n  ) {\n    if (config) {\n      boost.create(config);\n    }\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}