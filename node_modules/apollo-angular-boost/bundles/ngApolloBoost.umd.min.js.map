{"version":3,"sources":["../../src/tokens.ts","../../src/apollo-boost.ts","../../src/apollo-boost-module.ts"],"names":["APOLLO_BOOST_CONFIG","InjectionToken","ApolloBoost","apollo","httpLink","this","prototype","create","config","cache","cacheRedirects","InMemoryCache","stateLink","clientState","withClientState","Object","assign","errorLink","onError","_a","graphQLErrors","networkError","map","message","locations","path","console","log","requestHandler","request","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","then","oper","subscribe","next","bind","error","complete","catch","unsubscribe","httpOptions","uri","link","from","filter","x","Injectable","Apollo","HttpLink","boost","NgModule","args","imports","ApolloModule","HttpLinkModule","providers","Optional","type","Inject"],"mappings":"o3BAIaA,EAAsB,IAAIC,EAAAA,eACrC,8CCOA,SAAAC,EAAoBC,EAAwBC,GAAxBC,KAAAF,OAAAA,EAAwBE,KAAAD,SAAAA,SAErCF,EAAAI,UAAAC,OAAA,SAAOC,GACZ,IAAMC,EACJD,GAAUA,EAAOE,eACb,IAAIC,EAAAA,cAAc,CAACD,eAAgBF,EAAOE,iBAC1C,IAAIC,EAAAA,cAEJC,KACJJ,IAAUA,EAAOK,cACbC,EAAAA,gBAAeC,OAAAC,OAAAD,OAAAC,OAAA,GAAKR,EAAOK,aAAW,CAAEJ,MAAKA,KAG7CQ,EACJT,GAAUA,EAAOU,QACbA,EAAAA,QAAQV,EAAOU,SACfA,EAAAA,SAAQ,SAACC,OAACC,EAAaD,EAAAC,cAAEC,EAAYF,EAAAE,aAC/BD,GACFA,EAAcE,KAAI,SAACH,OAACI,EAAOJ,EAAAI,QAAEC,EAASL,EAAAK,UAAEC,EAAIN,EAAAM,KAE1C,OAAAC,QAAQC,IACN,6BAA6BJ,EAAO,eAAeC,EAAS,WAAWC,MAIzEJ,GAEFK,QAAQC,IAAI,oBAAoBN,MAIpCO,KACJpB,IAAUA,EAAOqB,UACb,IAAIC,EAAAA,YACF,SAACC,EAAWC,GACV,OAAA,IAAIC,EAAAA,YAAW,SAACC,GACd,IAAIC,EAYJ,OAXAC,QAAQC,QAAQN,GACbO,MAAK,SAACC,GAAS,OAAA/B,EAAOqB,QAAQU,MAC9BD,MAAK,WACJH,EAASH,EAAQD,GAAWS,UAAU,CACpCC,KAAMP,EAASO,KAAKC,KAAKR,GACzBS,MAAOT,EAASS,MAAMD,KAAKR,GAC3BU,SAAUV,EAASU,SAASF,KAAKR,QAGpCW,MAAMX,EAASS,MAAMD,KAAKR,IAEtB,WACDC,GACFA,EAAOW,qBAOjB1C,EAAWC,KAAKD,SAASG,OAAMQ,OAAAC,OAAAD,OAAAC,OAAA,GAC9BR,GAAUA,EAAOuC,aAAgB,IAAE,CACxCC,IAAMxC,GAAUA,EAAOwC,KAAQ,cAG3BC,EAAOnB,EAAAA,WAAWoB,KACtB,CAACjC,EAAWW,EAAgBhB,EAAWR,GAAU+C,QAC/C,SAACC,GAAM,QAAEA,MAIb/C,KAAKF,OAAOI,OAAO,CACjB0C,KAAIA,EACJxC,MAAKA,8BAxEV4C,EAAAA,sDAROC,EAAAA,cACAC,EAAAA,kBCUN,SACEC,EAGAhD,GAEIA,GACFgD,EAAMjD,OAAOC,wBAZlBiD,EAAAA,SAAQC,KAAA,CAAC,CACRC,QAAS,CAACC,EAAAA,aAAcC,EAAAA,gBACxBC,UAAW,CAAC5D,gDANNA,kCAWH6D,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMP,KAAA,CAAC1D","sourcesContent":["import {InjectionToken} from '@angular/core';\n\nimport {PresetConfig} from './types';\n\nexport const APOLLO_BOOST_CONFIG = new InjectionToken<PresetConfig>(\n  '[apollo-angular-boost] config',\n);\n","import {Injectable} from '@angular/core';\nimport {ApolloLink, Observable} from 'apollo-link';\nimport {Apollo} from 'apollo-angular';\nimport {HttpLink} from 'apollo-angular-link-http';\nimport {withClientState} from 'apollo-link-state';\nimport {onError} from 'apollo-link-error';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\n\nimport {PresetConfig} from './types';\n\n@Injectable()\nexport class ApolloBoost {\n  constructor(private apollo: Apollo, private httpLink: HttpLink) {}\n\n  public create(config: PresetConfig) {\n    const cache =\n      config && config.cacheRedirects\n        ? new InMemoryCache({cacheRedirects: config.cacheRedirects})\n        : new InMemoryCache();\n\n    const stateLink =\n      config && config.clientState\n        ? withClientState({...config.clientState, cache})\n        : false;\n\n    const errorLink =\n      config && config.onError\n        ? onError(config.onError)\n        : onError(({graphQLErrors, networkError}) => {\n            if (graphQLErrors) {\n              graphQLErrors.map(({message, locations, path}) =>\n                // tslint:disable-next-line\n                console.log(\n                  `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n                ),\n              );\n            }\n            if (networkError) {\n              // tslint:disable-next-line\n              console.log(`[Network error]: ${networkError}`);\n            }\n          });\n\n    const requestHandler =\n      config && config.request\n        ? new ApolloLink(\n            (operation, forward) =>\n              new Observable((observer) => {\n                let handle: any;\n                Promise.resolve(operation)\n                  .then((oper) => config.request(oper))\n                  .then(() => {\n                    handle = forward(operation).subscribe({\n                      next: observer.next.bind(observer),\n                      error: observer.error.bind(observer),\n                      complete: observer.complete.bind(observer),\n                    });\n                  })\n                  .catch(observer.error.bind(observer));\n\n                return () => {\n                  if (handle) {\n                    handle.unsubscribe();\n                  }\n                };\n              }),\n          )\n        : false;\n\n    const httpLink = this.httpLink.create({\n      ...((config && config.httpOptions) || {}),\n      uri: (config && config.uri) || '/graphql',\n    });\n\n    const link = ApolloLink.from(\n      [errorLink, requestHandler, stateLink, httpLink].filter(\n        (x) => !!x,\n      ) as ApolloLink[],\n    );\n\n    this.apollo.create({\n      link,\n      cache,\n    });\n  }\n}\n","import {NgModule, Optional, Inject} from '@angular/core';\nimport {ApolloModule} from 'apollo-angular';\nimport {HttpLinkModule} from 'apollo-angular-link-http';\n\nimport {ApolloBoost} from './apollo-boost';\nimport {APOLLO_BOOST_CONFIG} from './tokens';\nimport {PresetConfig} from './types';\n\n@NgModule({\n  imports: [ApolloModule, HttpLinkModule],\n  providers: [ApolloBoost],\n})\nexport class ApolloBoostModule {\n  constructor(\n    boost: ApolloBoost,\n    @Optional()\n    @Inject(APOLLO_BOOST_CONFIG)\n    config?: PresetConfig,\n  ) {\n    if (config) {\n      boost.create(config);\n    }\n  }\n}\n"]}