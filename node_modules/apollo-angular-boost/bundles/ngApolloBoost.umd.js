(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('graphql-tag'), require('apollo-client'), require('apollo-link'), require('apollo-cache-inmemory'), require('apollo-angular'), require('@angular/core'), require('apollo-angular-link-http'), require('apollo-link-state'), require('apollo-link-error')) :
    typeof define === 'function' && define.amd ? define('apollo-angular-boost', ['exports', 'graphql-tag', 'apollo-client', 'apollo-link', 'apollo-cache-inmemory', 'apollo-angular', '@angular/core', 'apollo-angular-link-http', 'apollo-link-state', 'apollo-link-error'], factory) :
    (global = global || self, factory(global['apollo-angular-boost'] = {}, global.graphqlTag, global.apollo, global.apolloLink.core, global.apollo.cache.inmemory, global.ngApollo, global.ng.core, global.ngApolloLinkHttp, global.apolloLink.state, global.apolloLink.error));
}(this, (function (exports, graphqlTag, apolloClient, apolloLink, apolloCacheInmemory, apolloAngular, core, apolloAngularLinkHttp, apolloLinkState, apolloLinkError) { 'use strict';

    graphqlTag = graphqlTag && Object.prototype.hasOwnProperty.call(graphqlTag, 'default') ? graphqlTag['default'] : graphqlTag;

    var APOLLO_BOOST_CONFIG = new core.InjectionToken('[apollo-angular-boost] config');

    var ApolloBoost = /** @class */ (function () {
        function ApolloBoost(apollo, httpLink) {
            this.apollo = apollo;
            this.httpLink = httpLink;
        }
        ApolloBoost.prototype.create = function (config) {
            var cache = config && config.cacheRedirects
                ? new apolloCacheInmemory.InMemoryCache({ cacheRedirects: config.cacheRedirects })
                : new apolloCacheInmemory.InMemoryCache();
            var stateLink = config && config.clientState
                ? apolloLinkState.withClientState(Object.assign(Object.assign({}, config.clientState), { cache: cache }))
                : false;
            var errorLink = config && config.onError
                ? apolloLinkError.onError(config.onError)
                : apolloLinkError.onError(function (_a) {
                    var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError;
                    if (graphQLErrors) {
                        graphQLErrors.map(function (_a) {
                            var message = _a.message, locations = _a.locations, path = _a.path;
                            // tslint:disable-next-line
                            return console.log("[GraphQL error]: Message: " + message + ", Location: " + locations + ", Path: " + path);
                        });
                    }
                    if (networkError) {
                        // tslint:disable-next-line
                        console.log("[Network error]: " + networkError);
                    }
                });
            var requestHandler = config && config.request
                ? new apolloLink.ApolloLink(function (operation, forward) { return new apolloLink.Observable(function (observer) {
                    var handle;
                    Promise.resolve(operation)
                        .then(function (oper) { return config.request(oper); })
                        .then(function () {
                        handle = forward(operation).subscribe({
                            next: observer.next.bind(observer),
                            error: observer.error.bind(observer),
                            complete: observer.complete.bind(observer),
                        });
                    })
                        .catch(observer.error.bind(observer));
                    return function () {
                        if (handle) {
                            handle.unsubscribe();
                        }
                    };
                }); })
                : false;
            var httpLink = this.httpLink.create(Object.assign(Object.assign({}, ((config && config.httpOptions) || {})), { uri: (config && config.uri) || '/graphql' }));
            var link = apolloLink.ApolloLink.from([errorLink, requestHandler, stateLink, httpLink].filter(function (x) { return !!x; }));
            this.apollo.create({
                link: link,
                cache: cache,
            });
        };
        return ApolloBoost;
    }());
    ApolloBoost.decorators = [
        { type: core.Injectable }
    ];
    ApolloBoost.ctorParameters = function () { return [
        { type: apolloAngular.Apollo },
        { type: apolloAngularLinkHttp.HttpLink }
    ]; };

    var ApolloBoostModule = /** @class */ (function () {
        function ApolloBoostModule(boost, config) {
            if (config) {
                boost.create(config);
            }
        }
        return ApolloBoostModule;
    }());
    ApolloBoostModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [apolloAngular.ApolloModule, apolloAngularLinkHttp.HttpLinkModule],
                    providers: [ApolloBoost],
                },] }
    ];
    ApolloBoostModule.ctorParameters = function () { return [
        { type: ApolloBoost },
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [APOLLO_BOOST_CONFIG,] }] }
    ]; };

    /**
     * Generated bundle index. Do not edit.
     */

    Object.keys(apolloClient).forEach(function (k) {
        if (k !== 'default') Object.defineProperty(exports, k, {
            enumerable: true,
            get: function () {
                return apolloClient[k];
            }
        });
    });
    Object.keys(apolloLink).forEach(function (k) {
        if (k !== 'default') Object.defineProperty(exports, k, {
            enumerable: true,
            get: function () {
                return apolloLink[k];
            }
        });
    });
    Object.keys(apolloCacheInmemory).forEach(function (k) {
        if (k !== 'default') Object.defineProperty(exports, k, {
            enumerable: true,
            get: function () {
                return apolloCacheInmemory[k];
            }
        });
    });
    Object.keys(apolloAngular).forEach(function (k) {
        if (k !== 'default') Object.defineProperty(exports, k, {
            enumerable: true,
            get: function () {
                return apolloAngular[k];
            }
        });
    });
    exports.gql = graphqlTag;
    exports.APOLLO_BOOST_CONFIG = APOLLO_BOOST_CONFIG;
    exports.ApolloBoost = ApolloBoost;
    exports.ApolloBoostModule = ApolloBoostModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngApolloBoost.umd.js.map
