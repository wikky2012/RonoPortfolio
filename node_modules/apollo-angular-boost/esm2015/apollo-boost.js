import { Injectable } from '@angular/core';
import { ApolloLink, Observable } from 'apollo-link';
import { Apollo } from 'apollo-angular';
import { HttpLink } from 'apollo-angular-link-http';
import { withClientState } from 'apollo-link-state';
import { onError } from 'apollo-link-error';
import { InMemoryCache } from 'apollo-cache-inmemory';
export class ApolloBoost {
    constructor(apollo, httpLink) {
        this.apollo = apollo;
        this.httpLink = httpLink;
    }
    create(config) {
        const cache = config && config.cacheRedirects
            ? new InMemoryCache({ cacheRedirects: config.cacheRedirects })
            : new InMemoryCache();
        const stateLink = config && config.clientState
            ? withClientState(Object.assign(Object.assign({}, config.clientState), { cache }))
            : false;
        const errorLink = config && config.onError
            ? onError(config.onError)
            : onError(({ graphQLErrors, networkError }) => {
                if (graphQLErrors) {
                    graphQLErrors.map(({ message, locations, path }) => 
                    // tslint:disable-next-line
                    console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));
                }
                if (networkError) {
                    // tslint:disable-next-line
                    console.log(`[Network error]: ${networkError}`);
                }
            });
        const requestHandler = config && config.request
            ? new ApolloLink((operation, forward) => new Observable((observer) => {
                let handle;
                Promise.resolve(operation)
                    .then((oper) => config.request(oper))
                    .then(() => {
                    handle = forward(operation).subscribe({
                        next: observer.next.bind(observer),
                        error: observer.error.bind(observer),
                        complete: observer.complete.bind(observer),
                    });
                })
                    .catch(observer.error.bind(observer));
                return () => {
                    if (handle) {
                        handle.unsubscribe();
                    }
                };
            }))
            : false;
        const httpLink = this.httpLink.create(Object.assign(Object.assign({}, ((config && config.httpOptions) || {})), { uri: (config && config.uri) || '/graphql' }));
        const link = ApolloLink.from([errorLink, requestHandler, stateLink, httpLink].filter((x) => !!x));
        this.apollo.create({
            link,
            cache,
        });
    }
}
ApolloBoost.decorators = [
    { type: Injectable }
];
ApolloBoost.ctorParameters = () => [
    { type: Apollo },
    { type: HttpLink }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBvbGxvLWJvb3N0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Fwb2xsby1ib29zdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxVQUFVLEVBQUUsVUFBVSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ25ELE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDbEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUMxQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFLcEQsTUFBTSxPQUFPLFdBQVc7SUFDdEIsWUFBb0IsTUFBYyxFQUFVLFFBQWtCO1FBQTFDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQUcsQ0FBQztJQUUzRCxNQUFNLENBQUMsTUFBb0I7UUFDaEMsTUFBTSxLQUFLLEdBQ1QsTUFBTSxJQUFJLE1BQU0sQ0FBQyxjQUFjO1lBQzdCLENBQUMsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxFQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsY0FBYyxFQUFDLENBQUM7WUFDNUQsQ0FBQyxDQUFDLElBQUksYUFBYSxFQUFFLENBQUM7UUFFMUIsTUFBTSxTQUFTLEdBQ2IsTUFBTSxJQUFJLE1BQU0sQ0FBQyxXQUFXO1lBQzFCLENBQUMsQ0FBQyxlQUFlLGlDQUFLLE1BQU0sQ0FBQyxXQUFXLEtBQUUsS0FBSyxJQUFFO1lBQ2pELENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFWixNQUFNLFNBQVMsR0FDYixNQUFNLElBQUksTUFBTSxDQUFDLE9BQU87WUFDdEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUMsRUFBRSxFQUFFO2dCQUN4QyxJQUFJLGFBQWEsRUFBRTtvQkFDakIsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUMsRUFBRSxFQUFFO29CQUMvQywyQkFBMkI7b0JBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQ1QsNkJBQTZCLE9BQU8sZUFBZSxTQUFTLFdBQVcsSUFBSSxFQUFFLENBQzlFLENBQ0YsQ0FBQztpQkFDSDtnQkFDRCxJQUFJLFlBQVksRUFBRTtvQkFDaEIsMkJBQTJCO29CQUMzQixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixZQUFZLEVBQUUsQ0FBQyxDQUFDO2lCQUNqRDtZQUNILENBQUMsQ0FBQyxDQUFDO1FBRVQsTUFBTSxjQUFjLEdBQ2xCLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTztZQUN0QixDQUFDLENBQUMsSUFBSSxVQUFVLENBQ1osQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FDckIsSUFBSSxVQUFVLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtnQkFDMUIsSUFBSSxNQUFXLENBQUM7Z0JBQ2hCLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO3FCQUN2QixJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7cUJBQ3BDLElBQUksQ0FBQyxHQUFHLEVBQUU7b0JBQ1QsTUFBTSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUM7d0JBQ3BDLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7d0JBQ2xDLEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7d0JBQ3BDLFFBQVEsRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7cUJBQzNDLENBQUMsQ0FBQztnQkFDTCxDQUFDLENBQUM7cUJBQ0QsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBRXhDLE9BQU8sR0FBRyxFQUFFO29CQUNWLElBQUksTUFBTSxFQUFFO3dCQUNWLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztxQkFDdEI7Z0JBQ0gsQ0FBQyxDQUFDO1lBQ0osQ0FBQyxDQUFDLENBQ0w7WUFDSCxDQUFDLENBQUMsS0FBSyxDQUFDO1FBRVosTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLGlDQUNoQyxDQUFDLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsS0FDekMsR0FBRyxFQUFFLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxVQUFVLElBQ3pDLENBQUM7UUFFSCxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUMxQixDQUFDLFNBQVMsRUFBRSxjQUFjLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FDckQsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ0ssQ0FDbEIsQ0FBQztRQUVGLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ2pCLElBQUk7WUFDSixLQUFLO1NBQ04sQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBMUVGLFVBQVU7OztZQVJILE1BQU07WUFDTixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QXBvbGxvTGluaywgT2JzZXJ2YWJsZX0gZnJvbSAnYXBvbGxvLWxpbmsnO1xuaW1wb3J0IHtBcG9sbG99IGZyb20gJ2Fwb2xsby1hbmd1bGFyJztcbmltcG9ydCB7SHR0cExpbmt9IGZyb20gJ2Fwb2xsby1hbmd1bGFyLWxpbmstaHR0cCc7XG5pbXBvcnQge3dpdGhDbGllbnRTdGF0ZX0gZnJvbSAnYXBvbGxvLWxpbmstc3RhdGUnO1xuaW1wb3J0IHtvbkVycm9yfSBmcm9tICdhcG9sbG8tbGluay1lcnJvcic7XG5pbXBvcnQge0luTWVtb3J5Q2FjaGV9IGZyb20gJ2Fwb2xsby1jYWNoZS1pbm1lbW9yeSc7XG5cbmltcG9ydCB7UHJlc2V0Q29uZmlnfSBmcm9tICcuL3R5cGVzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFwb2xsb0Jvb3N0IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhcG9sbG86IEFwb2xsbywgcHJpdmF0ZSBodHRwTGluazogSHR0cExpbmspIHt9XG5cbiAgcHVibGljIGNyZWF0ZShjb25maWc6IFByZXNldENvbmZpZykge1xuICAgIGNvbnN0IGNhY2hlID1cbiAgICAgIGNvbmZpZyAmJiBjb25maWcuY2FjaGVSZWRpcmVjdHNcbiAgICAgICAgPyBuZXcgSW5NZW1vcnlDYWNoZSh7Y2FjaGVSZWRpcmVjdHM6IGNvbmZpZy5jYWNoZVJlZGlyZWN0c30pXG4gICAgICAgIDogbmV3IEluTWVtb3J5Q2FjaGUoKTtcblxuICAgIGNvbnN0IHN0YXRlTGluayA9XG4gICAgICBjb25maWcgJiYgY29uZmlnLmNsaWVudFN0YXRlXG4gICAgICAgID8gd2l0aENsaWVudFN0YXRlKHsuLi5jb25maWcuY2xpZW50U3RhdGUsIGNhY2hlfSlcbiAgICAgICAgOiBmYWxzZTtcblxuICAgIGNvbnN0IGVycm9yTGluayA9XG4gICAgICBjb25maWcgJiYgY29uZmlnLm9uRXJyb3JcbiAgICAgICAgPyBvbkVycm9yKGNvbmZpZy5vbkVycm9yKVxuICAgICAgICA6IG9uRXJyb3IoKHtncmFwaFFMRXJyb3JzLCBuZXR3b3JrRXJyb3J9KSA9PiB7XG4gICAgICAgICAgICBpZiAoZ3JhcGhRTEVycm9ycykge1xuICAgICAgICAgICAgICBncmFwaFFMRXJyb3JzLm1hcCgoe21lc3NhZ2UsIGxvY2F0aW9ucywgcGF0aH0pID0+XG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICBgW0dyYXBoUUwgZXJyb3JdOiBNZXNzYWdlOiAke21lc3NhZ2V9LCBMb2NhdGlvbjogJHtsb2NhdGlvbnN9LCBQYXRoOiAke3BhdGh9YCxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5ldHdvcmtFcnJvcikge1xuICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtOZXR3b3JrIGVycm9yXTogJHtuZXR3b3JrRXJyb3J9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICBjb25zdCByZXF1ZXN0SGFuZGxlciA9XG4gICAgICBjb25maWcgJiYgY29uZmlnLnJlcXVlc3RcbiAgICAgICAgPyBuZXcgQXBvbGxvTGluayhcbiAgICAgICAgICAgIChvcGVyYXRpb24sIGZvcndhcmQpID0+XG4gICAgICAgICAgICAgIG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcikgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBoYW5kbGU6IGFueTtcbiAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUob3BlcmF0aW9uKVxuICAgICAgICAgICAgICAgICAgLnRoZW4oKG9wZXIpID0+IGNvbmZpZy5yZXF1ZXN0KG9wZXIpKVxuICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUgPSBmb3J3YXJkKG9wZXJhdGlvbikuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICAgICAgICBuZXh0OiBvYnNlcnZlci5uZXh0LmJpbmQob2JzZXJ2ZXIpLFxuICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBvYnNlcnZlci5lcnJvci5iaW5kKG9ic2VydmVyKSxcbiAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogb2JzZXJ2ZXIuY29tcGxldGUuYmluZChvYnNlcnZlciksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIC5jYXRjaChvYnNlcnZlci5lcnJvci5iaW5kKG9ic2VydmVyKSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZSkge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICApXG4gICAgICAgIDogZmFsc2U7XG5cbiAgICBjb25zdCBodHRwTGluayA9IHRoaXMuaHR0cExpbmsuY3JlYXRlKHtcbiAgICAgIC4uLigoY29uZmlnICYmIGNvbmZpZy5odHRwT3B0aW9ucykgfHwge30pLFxuICAgICAgdXJpOiAoY29uZmlnICYmIGNvbmZpZy51cmkpIHx8ICcvZ3JhcGhxbCcsXG4gICAgfSk7XG5cbiAgICBjb25zdCBsaW5rID0gQXBvbGxvTGluay5mcm9tKFxuICAgICAgW2Vycm9yTGluaywgcmVxdWVzdEhhbmRsZXIsIHN0YXRlTGluaywgaHR0cExpbmtdLmZpbHRlcihcbiAgICAgICAgKHgpID0+ICEheCxcbiAgICAgICkgYXMgQXBvbGxvTGlua1tdLFxuICAgICk7XG5cbiAgICB0aGlzLmFwb2xsby5jcmVhdGUoe1xuICAgICAgbGluayxcbiAgICAgIGNhY2hlLFxuICAgIH0pO1xuICB9XG59XG4iXX0=